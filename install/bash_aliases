# HYPERNETS_TOOLS=~/hypernets_tools

## define text highlights
HL=$(tput setaf 12) ## blue
XHL=$(tput setaf 9) ## red
BOLD=$(tput bold)
GREEN=$(tput setaf 10)
RESET_HL=$(tput sgr0) ## reset all text formatting

# print help
commands() {
	dupcc=$(df -kh . | tail -n1 | awk '{print $5}') >/dev/null 2>&1
	duchk="${dupcc//%}"

	echo
	if [[ $duchk -ge 80 ]]
	then
		echo "   Hypstar Commands    ${XHL}   DISK USAGE: $dupcc${RESET_HL}"
	else
		echo "   Hypstar Commands       DISK USAGE: $dupcc"
	fi
	echo "${HL} ********************" 
	echo "${HL} commands	${RESET_HL}to see this list"
	#echo "${HL} guide  	${RESET_HL}Hypstar cheat sheet "
	#echo "${HL} schedule	${RESET_HL}view/adjust yocto schedules 1 & 2     Set yocto rtc time"
	echo "${HL} relay   	${RESET_HL}get/set yocto relays   relay -h for help"
	echo "${HL} pt		${RESET_HL}Pan/Tilt position      pt -h for help"
	#echo "${HL} vm    	${RESET_HL}vm on   vm off "
	echo "${HL} now    	${RESET_HL}present status of: clock, meteo, rain, GPS, supply, wakeup"
	#echo "${HL} webpic  	${RESET_HL}takes  webcam photos, Photos stored in ~/hypernets_tools/OTHER/Web-site~sky/  & Server/Sitename/ "
	#echo "${HL} hypypic  	${RESET_HL}takes photo from hypstar camera. Photos stored in  ~/hypypics/   & Server/Sitename/ "
	#echo "${HL} level    	${RESET_HL}boom leveling assistant "
	echo "${HL} test-env  	${RESET_HL}displays hypstar latest environmental log"
	echo "${HL} test-env-live	${RESET_HL}displays hypstar environmental logs live"
	echo "${HL} status  	${RESET_HL}sudo systemctl status hypernets-sequence"
	echo "${HL} kill-service	${RESET_HL}kill hypernets-sequence service without going to sleep"
	echo "${HL} journal  	${RESET_HL}journalctl -b -u hypernets-sequence -e (journal -f to follow)"
	#echo "${HL} slog  	${RESET_HL}displays a summary log & index to logs of prevoius runs "
	#echo "${HL} portal  	${RESET_HL}makes a portal via ~/Portal folder to Server/Sitename/ "
	echo "${HL} gui		${RESET_HL}python -m hypernets.gui (if screen attached)"
	#echo "${HL} cp2server	 ${RESET_HL}                 ./utils/hello_server.sh   copy sequence data back to NPL server "
	echo "${HL} runseq	 	${RESET_HL}utils/run_service.sh    run a sequence"
	echo "${HL} yapo		${RESET_HL}yocto auto-power-off. yapo stop to disable, yapo -h for help"
	echo "${HL} goto-sleep	${RESET_HL}power off and send yocto to sleep if wakeup is scheduled"
	echo
} # commands()


# present status of: clock, meteo, rain, GPS, supply, wakeup
now() (
	cd $HYPERNETS_TOOLS

	# check if Yocto command line API is installed
	if [[ $(command -v YRealTimeClock) ]]; then
		yocto_api_installed=1

		source utils/configparser.sh
		yocto=$(parse_config "yocto_prefix2" config_static.ini)
	else
		yocto_api_installed=0
	fi

	echo "System time is $(date '+%Y/%m/%d %H:%M:%S %Z')"

	# get yocto time
	if [[ $yocto_api_installed ]]; then
		yocto_time=$(YRealTimeClock -f '[result]' -r 127.0.0.1 $yocto get_dateTime)
		yocto_offset=$(YRealTimeClock -f '[result]' -r 127.0.0.1 $yocto get_utcOffset)

		if [ $yocto_offset = 0 ]; then
			utc_offset=""
		else
			utc_offset=$(printf "%+d" $(($yocto_offset/3600)))
		fi

		if [ $yocto_offset = 0 ]; then
			echo "Yocto time is  $yocto_time UTC$utc_offset"
		else
			echo "Yocto time is  $yocto_time UTC$utc_offset (UTC offset is $yocto_offset s)"
		fi
	fi

	echo "Yocto meteo: $(python -m hypernets.yocto.meteo | sed -E -e 's/\(|\)|\[|\]|\"//g' | sed -e "s/'//2g" | sed '-es/,//'{7..1..2})"

	if [ ! -f hypernets/rain_sensor/rain_sensor ]; then
		(cd hypernets/rain_sensor/ && make)
	fi

	set +e
	relay_on="$(python -m hypernets.yocto.relay -g -n4 2>&1 | grep -c True)"
	set -e

	# rain sensor relay is off, switch on
	if [ $relay_on = 0 ]; then
		python -m hypernets.yocto.relay -son -n4
		sleep 1
	fi

	hypernets/rain_sensor/rain_sensor

	# restore rain sensor relay state
	if [ $relay_on = 0 ]; then
		python -m hypernets.yocto.relay -soff -n4
	fi

	echo "Yocto GPS: $(python -m hypernets.yocto.gps)"
	echo "Supply voltage is $(python -m hypernets.yocto.voltage) V"
	echo "Wake up reason is $(python -m hypernets.yocto.wakeupreason)"

	# get watchdog and wakeup timers
	if [[ $yocto_api_installed ]]; then
		next_wakeup_timestamp=$(YWakeUpMonitor -f '[result]' -r 127.0.0.1 $yocto get_nextWakeUp|sed -e 's/[[:space:]].*//')
		max_wakeup_time=$(YWakeUpMonitor -f '[result]' -r 127.0.0.1 $yocto get_powerDuration)
		sleep_countdown=$(YWakeUpMonitor -f '[result]' -r 127.0.0.1 $yocto get_sleepCountdown)

		if [ $max_wakeup_time = 0 ]; then
			echo "${XHL}Yocto Auto-Power-Off is disabled${RESET_HL}"
		else
			echo "${HL}Yocto Auto-Power-Off set to $max_wakeup_time s, ${XHL}powering off in $sleep_countdown s${RESET_HL}"
		fi

		if [ $next_wakeup_timestamp = 0 ]; then
			echo "${XHL}Yocto scheduled wakeup is disabled${RESET_HL}"
		else
			delta=$(( $next_wakeup_timestamp - $yocto_offset - $(date -u +%s) ))
			echo "${HL}Next Yocto wakeup is scheduled on $(date -d @$next_wakeup_timestamp '+%Y/%m/%d %H:%M:%S') UTC$utc_offset (in $delta s)${RESET_HL}"
		fi
	fi
) #now()


# returns states or with args sets relay n state    eg: relay 5 on   relay 6 off ...
relay() (
	cd $HYPERNETS_TOOLS

	if [[ $1 == "-h" ]] || [[ $1 == "--help" ]]; then
		echo
		echo "Yocto relays"
		echo "relay [-h|--help] [relay_number on|off]"
		echo "relay -h      print this help"
		echo "relay         print current relay states"
		echo "relay 3 on    switch on HYPSTAR relay #3"
		echo "relay 3 off   switch off HYPSTAR relay #3"
		echo
		exit 1
	fi

	if [[ $2 == "on" ]] || [[ $2 == "off" ]]; then
		python -m hypernets.yocto.relay -s $2 -n $1
	fi

	echo -e "PC\tPT\tHYP\tRS\tCAM1\tCAM2"
	echo -e  "1\t2\t3\t4\t5\t6"
	python -m hypernets.yocto.relay -g -n1 -n2 -n3 -n4 -n5 -n6 2>&1 | egrep -o  "(True|False)" | sed -e "s/False/${XHL}OFF${RESET_HL}/g;s/True/${GREEN}ON${RESET_HL}/g" | paste -s
) # relay()


# displays hypstar test_env once
test-env() (
	cd $HYPERNETS_TOOLS

	set +e
	relay_on=$(python -m hypernets.yocto.relay -g -n3 2>&1 | grep -c True)
	set -e

	if [ $relay_on = 0 ]; then
		echo "${XHL}Radiometer relay #3 is off${RESET_HL}"
		exit
	fi

	cd hypernets/hypstar/libhypstar/ 

	if [ -f build/test_env ]; then
		build/test_env | grep -v -e "DEBUG" -e "TRACE"
	else
		make test_env | grep -v -e "DEBUG" -e "TRACE"
	fi
) # test-env()


# displays hypstar test_env live
test-env-live() (
	cd $HYPERNETS_TOOLS

	set +e
	relay_on=$(python -m hypernets.yocto.relay -g -n3 2>&1 | grep -c True)
	set -e

	if [ $relay_on = 0 ]; then
		echo "${XHL}Radiometer relay #3 is off${RESET_HL}"
		exit
	fi

	cd hypernets/hypstar/libhypstar/ 

	if [ -f build/test_env_live ]; then
		build/test_env_live | grep -v -e "DEBUG" -e "TRACE"
	else
		make test_env_live | grep -v -e "DEBUG" -e "TRACE"
	fi
) # test-env-live()


# power off and send yocto to sleep if wakeup is scheduled
goto-sleep() (
	cd $HYPERNETS_TOOLS

	# dummy sudo for quick elevation of privileges later during poweroff
	# yocto sleep timer is only 10 s
	sudo sleep 0

	# forced sleep
	if [[ ${1-} == "--force" ]]; then
		echo "${XHL}Forcing sleep${RESET_HL}"
		force="--force"
	fi

	set +e
    python -m hypernets.yocto.sleep_monitor ${force-}
	yocto_sleep=$?
	set -e

	if [[ $yocto_sleep -eq 0 ]]; then
		# All OK, shuttig down
		echo "${XHL}Powering off${RESET_HL}"
		sleep 1
		sudo poweroff
	fi

	# Something went wrong
	if [[ $yocto_sleep -eq 1 ]]; then
		echo "${XHL}Yocto unreachable !!${RESET_HL}"
	elif [[ $yocto_sleep -eq 255 ]]; then
		echo "${XHL}Yocto scheduled wakeup is disabled!!!"
		echo "${BOLD}Waking up is possible ONLY by manually pressing 'WAKE' button!!!${RESET_HL}"
		echo
		echo "${XHL}Use 'goto-sleep --force' to force sleep${RESET_HL}"
	fi
) # goto-sleep()


## Yocto-Auto-Power-Off configuration
yapo() (
	cd $HYPERNETS_TOOLS

	yoption=$1
	new_max_runtime=$2

	# check if Yocto command line API is installed
	if [[ $(command -v YWakeUpMonitor) ]]; then
		source utils/configparser.sh
		yocto=$(parse_config "yocto_prefix2" config_static.ini)
	else
		echo "${XHL}Yocto API is not installed${RESET_HL}"
		exit -1
	fi

	if [[ $yoption == "-h" ]] || [[ $yoption == "--help" ]]; then
		echo
		echo "Yocto~Auto~Power~Off"
		echo "yapo			without options returns the time in seconds until yocto turns PC power off"
		echo "     set 180->99999	sets yocto max run time (in secs)   ${XHL}(3 minutes minimum!)${RESET_HL}"
		echo "     stop		prevents yocto powering off for   infinity..."
		echo "     reset		resets the yocto power-off countdown timer"
		echo "eg:  yapo set 720      yapo stop       yapo reset"
		echo
		exit 
	fi
	
	max_wakeup_time=$(YWakeUpMonitor -f '[result]' -r 127.0.0.1 $yocto get_powerDuration)
	next_wakeup_timestamp=$(YWakeUpMonitor -f '[result]' -r 127.0.0.1 $yocto get_nextWakeUp|sed -e 's/[[:space:]].*//')
	sleep_countdown=$(YWakeUpMonitor -f '[result]' -r 127.0.0.1 $yocto get_sleepCountdown)
	yocto_offset=$(YRealTimeClock -f '[result]' -r 127.0.0.1 $yocto get_utcOffset)
		
	if [[ $yoption == "" ]]; then ######## display yocto-auto-power-off status ###############
		if [[ $max_wakeup_time -eq "0" ]]; then
			echo "${HL}Yocto Auto-Power-Off is ${XHL}disabled! ${HL}PC will run for ${XHL}infinity...${RESET_HL}"
			echo "Enter:   yapo set    to re-enable yocto-auto-power-off"
			exit 0
		else 
			echo "${HL}Yocto Auto-Power-Off set to $max_wakeup_time s, ${XHL}powering off in $sleep_countdown s${RESET_HL}"
			if [ $yocto_offset = 0 ]; then
				utc_offset=""
			else
				utc_offset=$(printf "%+d" $(($yocto_offset/3600)))
			fi
			
			if [ $next_wakeup_timestamp = 0 ]; then
				echo "${XHL}Yocto scheduled wakeup is disabled${RESET_HL}"
			else
				delta=$(( $next_wakeup_timestamp - $yocto_offset - $(date -u +%s) ))
				echo "${HL}Next Yocto wakeup is scheduled on $(date -d @$next_wakeup_timestamp '+%Y/%m/%d %H:%M:%S') UTC$utc_offset (in $delta s)${RESET_HL}"
			fi

			echo "Enter:   yapo stop    to disable yocto-auto-power-off"
			echo "         yapo reset   to reset the countdown timer"
		fi
	elif [[ $yoption == "stop" ]]; then ############ disable yocto-auto-power-off ################
		if [[ $max_wakeup_time -ne "0" ]]; then
			echo "${HL}Auto-Power-Off setting was $max_wakeup_time s${RESET_HL}"

			YWakeUpMonitor -r 127.0.0.1 -s $yocto set_powerDuration 0 >/dev/null 2>&1
			echo "${XHL}Yocto Auto-Power-Off is now disabled${RESET_HL}"
		else
			echo "${HL}Yocto Auto-Power-Off was already ${XHL}disabled${RESET_HL}"
		fi
	elif [[ $yoption == "set" ]]; then #################### Set max run time ##########################
		# check is not empty & is a number
		set +eu
		[ -n "$new_max_runtime" ] && [ "$new_max_runtime" -eq "$new_max_runtime" ] 2>/dev/null
		if [ $? -ne 0 ]; then
			echo "${XHL}Invalid input, yapo set requires max runtime in seconds as second parameter.${RESET_HL}"
			echo
			exit -1
		fi
		set -eu

		if (( $new_max_runtime < 180 )); then  # LIMIT YOCTO MAXRUNTIME TO NO LESS THAN 3 MINS 
			new_max_runtime=180
			echo "${XHL}Requested runtime limit is too short, using minimum allowed value ${new_max_runtime} s${RESET_HL}"
		fi

		YWakeUpMonitor -r 127.0.0.1 -s $yocto set_powerDuration $new_max_runtime >/dev/null 2>&1
		set_max_wakeup_time=$(YWakeUpMonitor -f '[result]' -r 127.0.0.1 $yocto get_powerDuration)
		echo "${HL}Auto-Power-Off set to power off after ${XHL}$set_max_wakeup_time seconds${RESET_HL}"
	elif [[ $yoption == "reset" ]]; then #################### Reset shutdown counter max run time ##########################
		if [[ $max_wakeup_time -ne "0" ]]; then
			YWakeUpMonitor -r 127.0.0.1 $yocto set_sleepCountdown $max_wakeup_time >/dev/null 2>&1
			new_sleep_countdown=$(YWakeUpMonitor -f '[result]' -r 127.0.0.1 $yocto get_sleepCountdown)
			echo "${HL}Auto-Power-Off reset to power off after ${XHL}$new_sleep_countdown seconds${RESET_HL}"
		else
			echo "${HL}Yocto Auto-Power-Off was already ${XHL}disabled${RESET_HL}"
		fi
	else
		echo "Unknown option, run yapo -h for help"
	fi
) # yapo()


## helper functions for converting between absolute and relative positions
## force to 0...360 range
_pt_abs2rel_pan() {
	if [[ $reverse_tilt == "yes" ]]; then
		printf "%.1f" $( bc <<< "($1 - $offset_pan - 180 + 36000) % 360" )
	else
		printf "%.1f" $( bc <<< "($1 + $offset_pan + 36000) % 360" )
	fi
}

_pt_abs2rel_tilt() {
	if [[ $reverse_tilt == "yes" ]]; then
		printf "%.1f" $( bc <<< "(- $1 - $offset_tilt + 36000) % 360" )
	else
		printf "%.1f" $( bc <<< "($1 + $offset_tilt + 36000) % 360" )
	fi
}

_pt_rel2abs_pan() {
	if [[ $reverse_tilt == "yes" ]]; then
		printf "%.1f" $( bc <<< "($1 + $offset_pan + 180 + 36000) % 360" )
	else
		printf "%.1f" $( bc <<< "($1 - $offset_pan + 36000) % 360" )
	fi
}

_pt_rel2abs_tilt() {
	if [[ $reverse_tilt == "yes" ]]; then
		printf "%.1f" $( bc <<< "(- ($1 + $offset_tilt) + 36000) % 360" )
	else
		printf "%.1f" $( bc <<< "($1 - $offset_tilt + 36000) % 360" )
	fi
}


## Pan-Tilt control
pt() (
	cd $HYPERNETS_TOOLS

	if [[ $1 == "-h" ]] || [[ $1 == "--help" ]]; then
		echo
		echo "  Pan-tilt control"
		echo "********************"
		echo "pt [-h|--help] [abs|sun] [new_pan new_tilt]"
		echo "pt                        without options returns the current pan-tilt position"
		echo "   new_pan new_tilt       move pan-tilt while accounting for the offsets in config_dynamic.ini"
		echo "   abs new_pan new_tilt   move pan-tilt to absolute position"
		echo "   sun new_pan new_tilt   move pan-tilt to position relative to the sun"
		echo
		echo "pt sun  without arguments points to the sun"
		echo "use x as new value for the axis that has to stay in the current position"
		echo "eg: pt 270 90   pt abs 270 90   pt x 0   pt sun"
		echo
		exit 
	fi

	source utils/configparser.sh
	offset_tilt=$(parse_config "offset_tilt" config_dynamic.ini)
	offset_pan=$(parse_config "offset_pan" config_dynamic.ini)
	reverse_tilt=$(parse_config "reverse_tilt" config_dynamic.ini)

	# use absolute position
	if [[ $1 == "abs" ]]; then
		abspos=1
		sunpos=0
		shift 1
	elif [[ $1 == "sun" ]]; then
		abspos=0
		sunpos=1
		shift 1
	
		## if pan and tilt are empty then set to 0
		set +eu
		if [ -z "$1" ]; then set -- "0" "0"; fi 
		set -eu

		## calculate sun position
		python_script=$(cat << EOF
from hypernets.geometry.spa_hypernets import spa_from_datetime

azimuth_sun, zenith_sun = spa_from_datetime()
print(f"{azimuth_sun:.2f}\t{zenith_sun:.2f}")
EOF
		)

		spa=$(python -c "$python_script")
		sun_azimuth=$(cut -f 1 <<< $spa)
		sun_zenith=$(cut -f 2 <<< $spa)

		sun_elevation=$(bc <<< "90 - $sun_zenith")

		latitude=$(parse_config "latitude" config_dynamic.ini)
		longitude=$(parse_config "longitude" config_dynamic.ini)
		elevation=$(parse_config "elevation" config_dynamic.ini)

		# get gps position and time
		gps=$(python -m hypernets.yocto.gps  | sed -e "s/, /\t/g; s/[()]//g; s/b\?'//g")
		gps_latitude=$(cut -f 1 <<< $gps)
		gps_longitude=$(cut -f 2 <<< $gps)
		gps_datetime=$(cut -f 3 <<< $gps)
		if [ $gps_datetime = "N/A" ]; then gps_hasfix=0; else gps_hasfix=1; fi

		echo "${HL}Using parameters from config_dynamic.ini:${RESET_HL}"
		if [ $gps_hasfix = 1 ]; then
			echo "latitude = $latitude (GPS: $gps_latitude)"
			echo "longitude = $longitude (GPS: $gps_longitude)"
		else
			echo "latitude = $latitude"
			echo "longitude = $longitude"
		fi
		echo "elevation = $elevation"
		echo "offset_pan = $offset_pan"
		echo "offset_tilt = $offset_tilt"
		echo "reverse_tilt = $reverse_tilt"
		echo "Using system time $(date '+%Y/%m/%d %H:%M:%S %Z')"
		if [ $gps_hasfix = 1 ]; then
			echo "GPS time is       $gps_datetime UTC"
		else
			echo "${HL}No GPS fix${RESET_HL}"
		fi

		echo
		printf "${HL}Sun position: azimuth %.2f, zenith %.2f, elevation %.2f\n${RESET_HL}" $sun_azimuth $sun_zenith $sun_elevation
	else
		abspos=0
		sunpos=0
	fi

	# check if pan-tilt relay is on
	relay_state=$(python -m hypernets.yocto.relay -g -n2 2>&1 | egrep -o "(True|False)")

	if [[ $relay_state != "True" ]]; then 
		echo  "${XHL}Relay 2 is off! Turn on to operate pan-tilt${RESET_HL}"
		exit -1
	fi

	## read absolute position
	current_abs_pos=$(python -m hypernets.geometry.pan_tilt -g 2>&1 | grep -Eo '[0-9]+([.][0-9]+)?' | paste -s) # pan	tilt
	current_abs_pan=$(cut -f 1 <<< $current_abs_pos)
	current_abs_tilt=$(cut -f 2 <<< $current_abs_pos)

	## calculate relative position
	current_hyper_pan=$(_pt_abs2rel_pan $current_abs_pan)
	current_hyper_tilt=$(_pt_abs2rel_tilt $current_abs_tilt)

	############### print current position #################
	if [[ ${1-} == "" ]]; then
		echo "Current parameters"
		echo "offset_pan = $offset_pan"
		echo "offset_tilt = $offset_tilt"
		echo "reverse_tilt = $reverse_tilt"
		echo
		echo "Current positions"
		printf "abs:   pan = %.1f, tilt = %.1f\n" $current_abs_pan $current_abs_tilt
		printf "hyper: pan = %.1f, tilt = %.1f\n" $current_hyper_pan $current_hyper_tilt
	else ################## go to position ###################
		set +eu
		# check pan and tilt parameters are not empty and are numbers or "x"
		[ -n "$1" ] && [ -n "$2" ] && ( [ "$1" -eq "$1" ] || [[ "$1" == "x" ]] ) 2>/dev/null && ( [ "$2" -eq "$2" ] || [[ "$2" == "x" ]] ) 2>/dev/null
		if [ $? -ne 0 ]; then
			echo "${XHL}Invalid input, enter numeric pan and tilt values or x if no movement is required.${RESET_HL}"
			exit -1
		fi
		set -eu

		if [[ "$1" == "x" ]]; then ## use current
			requested_abs_pan=$current_abs_pan
		elif [ $abspos = 1 ]; then ## requested abs
			requested_abs_pan="$1"
		elif [ $sunpos = 1 ]; then ## requested sun
			requested_rel_sun_pan=$(bc <<< "$sun_azimuth + ($1)")
			requested_abs_pan=$(_pt_rel2abs_pan "$requested_rel_sun_pan")
		else ## requested hyper
			requested_abs_pan=$(_pt_rel2abs_pan "$1")
		fi

		if [[ "$2" == "x" ]]; then ## use current
			requested_abs_tilt=$current_abs_tilt
		elif [ $abspos = 1 ]; then ## requested abs
			requested_abs_tilt="$2"
		elif [ $sunpos = 1 ]; then ## requested sun, zenith is 180 in relative coords
			requested_rel_sun_tilt=$(bc <<< "(180 - $sun_zenith + ($2))")
			requested_abs_tilt=$(_pt_rel2abs_pan "$requested_rel_sun_tilt")
		else ## requested hyper
			requested_abs_tilt=$(_pt_rel2abs_tilt "$2")
		fi

		## force to 0...360 range
		requested_abs_pan=$( bc <<< "($requested_abs_pan + 36000) % 360" )
		requested_abs_tilt=$( bc <<< "($requested_abs_tilt + 36000) % 360" )
	
		printf "Moving to requested absolute position pan = %.1f, tilt = %.1f\n" $requested_abs_pan $requested_abs_tilt
		python -m hypernets.geometry.pan_tilt -w -p $requested_abs_pan -t $requested_abs_tilt > /dev/null 2>&1

		## read new abs positions
		new_abs_pos=$(python -m hypernets.geometry.pan_tilt -g 2>&1 | grep -Eo '[0-9]+([.][0-9]+)?' | paste -s) # pan	tilt
		new_abs_pan=$(cut -f 1 <<< $new_abs_pos)
		new_abs_tilt=$(cut -f 2 <<< $new_abs_pos)
	
		## calculate relative position
		new_hyper_pan=$(_pt_abs2rel_pan $new_abs_pan)
		new_hyper_tilt=$(_pt_abs2rel_tilt $new_abs_tilt)

		## calculate residuals
		residual_pan=$( bc <<< "$new_abs_pan - $requested_abs_pan" )
		residual_tilt=$( bc <<< "$new_abs_tilt - $requested_abs_tilt" )

		echo
		echo "New positions"
		printf "abs:   pan = %.1f, tilt = %.1f, residuals: pan = %.1f, tilt = %.1f\n" $new_abs_pan $new_abs_tilt $residual_pan $residual_tilt
		printf "hyper: pan = %.1f, tilt = %.1f\n" $new_hyper_pan $new_hyper_tilt

		if [ $sunpos = 1 ]; then ## requested sun
			new_sun_pan=
		fi
	fi
) # pt()


alias kill-service="sudo systemctl kill --signal=SIGKILL hypernets-sequence"
alias journal="journalctl -b -u hypernets-sequence -e"
alias status="sudo systemctl status hypernets-sequence"
alias gui="(cd $HYPERNETS_TOOLS && python -m hypernets.gui)"
alias runseq="(cd $HYPERNETS_TOOLS && ./utils/run_service.sh)"

# print the help
commands
